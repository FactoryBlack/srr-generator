const socket = io();
let isCreator = false;
let currentRoomID = null;

// Hide sections initially without removing them from the DOM
window.addEventListener('DOMContentLoaded', () => {
    document.getElementById("submitNameSection").style.display = "none";
    document.getElementById("memberInfoSection").style.display = "none";
    document.getElementById("teamGenerationSection").style.visibility = "hidden"; // Keep section in DOM but hidden
    document.getElementById("generateTeams").style.display = "none"; // Only show button to creator
});

socket.on('creatorStatus', (data) => {
    isCreator = data.isCreator;
    console.log("Creator status:", isCreator);

    // Show the Generate Teams button only if the user is the creator
    const generateButton = document.getElementById("generateTeams");
    generateButton.style.display = isCreator ? "inline-block" : "none";
});

function joinRoom(roomID) {
    currentRoomID = roomID;
    socket.emit('joinRoom', { roomID, isPublic: true, teamSize: 2 });

    // Show the sections when the user joins a room
    document.getElementById("submitNameSection").style.display = "block";
    document.getElementById("memberInfoSection").style.display = "block";
    document.getElementById("teamGenerationSection").style.visibility = "visible"; // Show team generation section for all

    // Clear previous listeners to prevent duplication
    socket.off('updateNames');
    socket.off('displayTeams');

    // Update names with Kick button functionality for the creator
    socket.on('updateNames', (users) => {
        console.log("Received updateNames event. Users:", users);
        const nameListDiv = document.getElementById("nameList");
        if (nameListDiv) {
            nameListDiv.innerHTML = users.map(user => {
                const kickButton = isCreator ? `<button class="kick-button" onclick="kickUser('${user.id}')">Kick</button>` : '';
                return `<p>${user.name} ${user.afkq ? "(AFKQ Tool)" : ""} ${kickButton}</p>`;
            }).join('');
        } else {
            console.warn("nameListDiv not found in DOM when attempting to update names.");
        }
    });

    // Display teams generated by the creator
    socket.on('displayTeams', (teams) => {
        console.log("Received displayTeams event. Teams:", teams);
        const teamListDiv = document.getElementById("teamList");
        if (teamListDiv) {
            teamListDiv.innerHTML = teams.map((team, i) =>
                `<p><strong>Team ${i + 1}:</strong> ${team.join(', ')}</p>`
            ).join('');
        } else {
            console.warn("teamListDiv not found in DOM when attempting to display teams.");
        }
    });
}

function kickUser(userID) {
    console.log("Kick button clicked for user:", userID);

    if (currentRoomID && isCreator) {
        socket.emit('kickUser', { roomID: currentRoomID, userID });
        console.log("kickUser event emitted for user:", userID);
    } else {
        console.log("Kick failed: Not the creator or room ID missing.");
    }
}

// Listen for the kicked event to reset the UI for the kicked user
socket.on('kicked', (message) => {
    alert(message);
    console.log("Kicked event received:", message);

    // Clear all room-related data on the page
    document.getElementById("submitNameSection").style.display = "none";
    document.getElementById("memberInfoSection").style.display = "none";
    document.getElementById("teamGenerationSection").style.visibility = "hidden"; // Hide team generation if kicked
    document.getElementById("nameList").innerHTML = "";
    document.getElementById("teamList").innerHTML = "";
    document.getElementById("roomsList").innerHTML = "";
    document.getElementById("memberCount").textContent = "Total Members: 0, Named: 0, Unnamed: 0";
});

// Update member count display
socket.on('memberCount', ({ total, named, unnamed }) => {
    document.getElementById("memberCount").textContent =
        `Total Members: ${total}, Named: ${named}, Unnamed: ${unnamed}`;
});

// Join or create a room when the Join/Create button is clicked
document.getElementById("joinRoom").addEventListener("click", () => {
    const roomID = document.getElementById("roomID").value.trim();
    currentRoomID = roomID;
    const isPublic = document.getElementById("isPublic").checked;
    const teamSize = parseInt(document.getElementById("teamSizeSelect").value) || 2;

    socket.emit('joinRoom', { roomID, isPublic, teamSize });

    document.getElementById("submitNameSection").style.display = "block";
    document.getElementById("memberInfoSection").style.display = "block";
    document.getElementById("teamGenerationSection").style.visibility = "visible"; // Show team generation for all
});

// Submit name to the room
document.getElementById("submitName").addEventListener("click", () => {
    const name = document.getElementById("nameInput").value.trim();
    const afkq = document.getElementById("afkqTool").checked;

    if (name && currentRoomID) {
        socket.emit('submitName', { roomID: currentRoomID, name, afkq });
        document.getElementById("nameInput").value = ""; // Clear the input field
    }
});

// Generate teams if the user is the creator
document.getElementById("generateTeams").addEventListener("click", () => {
    if (currentRoomID && isCreator) {
        socket.emit('generateTeams', { roomID: currentRoomID });
    } else {
        alert("Only the room creator can generate teams.");
    }
});

// Handle room closure by the creator
socket.on('roomClosed', () => {
    alert("The room has been closed by the creator.");
    document.getElementById("submitNameSection").style.display = "none";
    document.getElementById("memberInfoSection").style.display = "none";
    document.getElementById("teamGenerationSection").style.visibility = "hidden"; // Hide team generation upon room closure
    document.getElementById("nameList").innerHTML = "";
    document.getElementById("teamList").innerHTML = "";
});

socket.on('joinDenied', (message) => {
    alert(message);
    console.log("Join denied message received:", message);
});

window.kickUser = kickUser;
